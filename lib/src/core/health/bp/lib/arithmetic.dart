/* eslint-disable no-param-reassign */
const B = [4.066693e-1, 0, -8.133387e-1, 0, 4.066693e-1];
const A = [1, -7.759901e-1, -2.342935e-1, 8.078268e-3, 2.03421e-1];
const FIR = [
  2.348661e-4,
  3.579679e-5,
  1.204414e-4,
  1.884837e-4,
  -6.242249e-6,
  2.218728e-4,
  6.214719e-5,
  7.115943e-5,
  2.147019e-4,
  -2.496524e-5,
  1.925316e-4,
  9.202572e-5,
  1.406779e-5,
  2.292334e-4,
  -3.8221e-5,
  1.434054e-4,
  1.233144e-4,
  -5.050677e-5,
  2.261791e-4,
  -4.476452e-5,
  7.071e-5,
  1.519877e-4,
  -1.20647e-4,
  1.978181e-4,
  -4.338013e-5,
  -2.80142e-5,
  1.716167e-4,
  -1.920693e-4,
  1.358374e-4,
  -3.360166e-5,
  -1.520273e-4,
  1.734017e-4,
  -2.579471e-4,
  3.329581e-5,
  -1.661238e-5,
  -2.957414e-4,
  1.469428e-4,
  -3.094817e-4,
  -1.129544e-4,
  3.949796e-6,
  -4.477384e-4,
  8.182312e-5,
  -3.372024e-4,
  -2.998137e-4,
  2.159107e-5,
  -5.90817e-4,
  -3.008892e-5,
  -3.32808e-4,
  -5.159737e-4,
  2.723975e-5,
  -7.032771e-4,
  -1.919057e-4,
  -2.912101e-4,
  -7.409751e-4,
  1.037225e-5,
  -7.614335e-4,
  -3.990034e-4,
  -2.123438e-4,
  -9.457193e-4,
  -3.900806e-5,
  -7.43114e-4,
  -6.368808e-4,
  -1.022957e-4,
  -1.094683e-3,
  -1.277316e-4,
  -6.316733e-4,
  -8.801728e-4,
  2.662565e-5,
  -1.149821e-3,
  -2.565498e-4,
  -4.198941e-4,
  -1.093316e-3,
  1.570958e-4,
  -1.075851e-3,
  -4.174896e-4,
  -1.130736e-4,
  -1.233171e-3,
  2.692479e-4,
  -8.463203e-4,
  -5.920923e-4,
  2.69363e-4,
  -1.253641e-3,
  3.441574e-4,
  -4.496392e-4,
  -7.511295e-4,
  6.942162e-4,
  -1.111986e-3,
  3.67839e-4,
  1.058785e-4,
  -8.562468e-4,
  1.117068e-3,
  -7.762084e-4,
  3.350786e-4,
  7.888941e-4,
  -8.637464e-4,
  1.486941e-3,
  -2.325984e-4,
  2.523385e-4,
  1.544629e-3,
  -7.303911e-4,
  1.752611e-3,
  5.076565e-4,
  1.390146e-4,
  2.297637e-3,
  -4.207584e-4,
  1.869806e-3,
  1.403939e-3,
  2.649056e-5,
  2.95785e-3,
  8.46678e-5,
  1.808301e-3,
  2.384762e-3,
  -4.52753e-5,
  3.429513e-3,
  7.817441e-4,
  1.557819e-3,
  3.350152e-3,
  -3.353404e-5,
  3.622189e-3,
  1.636464e-3,
  1.131702e-3,
  4.178167e-3,
  9.959928e-5,
  3.462627e-3,
  2.581486e-3,
  5.67565e-4,
  4.735316e-3,
  3.784851e-4,
  2.906052e-3,
  3.516381e-3,
  -7.552721e-5,
  4.89015e-3,
  8.054359e-4,
  1.945372e-3,
  4.312184e-3,
  -7.233228e-4,
  4.528741e-3,
  1.353602e-3,
  6.169565e-4,
  4.820367e-3,
  -1.295589e-3,
  3.570448e-3,
  1.962486e-3,
  -9.980288e-4,
  4.885743e-3,
  -1.717298e-3,
  1.982167e-3,
  2.537068e-3,
  -2.777214e-3,
  4.362241e-3,
  -1.930488e-3,
  -2.106866e-4,
  2.951058e-3,
  -4.56541e-3,
  3.130009e-3,
  -1.905348e-3,
  -2.917859e-3,
  3.054252e-3,
  -6.186975e-3,
  1.111955e-3,
  -1.649126e-3,
  -5.983473e-3,
  2.683219e-3,
  -7.460694e-3,
  -1.712278e-3,
  -1.211789e-3,
  -9.190752e-3,
  1.673779e-3,
  -8.215142e-3,
  -5.296779e-3,
  -6.879771e-4,
  -1.227118e-2,
  -1.271827e-4,
  -8.301913e-3,
  -9.525783e-3,
  -2.157863e-4,
  -1.491541e-2,
  -2.854298e-3,
  -7.603449e-3,
  -1.421694e-2,
  2.545399e-5,
  -1.678069e-2,
  -6.626808e-3,
  -6.030723e-3,
  -1.913161e-2,
  -1.86898e-4,
  -1.748419e-2,
  -1.157427e-2,
  -3.501818e-3,
  -2.399153e-2,
  -1.138292e-3,
  -1.655643e-2,
  -1.791523e-2,
  1.216042e-4,
  -2.850049e-2,
  -3.251833e-3,
  -1.327762e-2,
  -2.618687e-2,
  5.218366e-3,
  -3.236898e-2,
  -7.359677e-3,
  -6.089196e-3,
  -3.804661e-2,
  1.30758e-2,
  -3.53392e-2,
  -1.593082e-2,
  1.025505e-2,
  -6.047155e-2,
  2.983333e-2,
  -3.720814e-2,
  -4.359466e-2,
  7.608758e-2,
  -1.727133e-1,
  1.882178e-1,
  7.623485e-1,
  1.882178e-1,
  -1.727133e-1,
  7.608758e-2,
  -4.359466e-2,
  -3.720814e-2,
  2.983333e-2,
  -6.047155e-2,
  1.025505e-2,
  -1.593082e-2,
  -3.53392e-2,
  1.30758e-2,
  -3.804661e-2,
  -6.089196e-3,
  -7.359677e-3,
  -3.236898e-2,
  5.218366e-3,
  -2.618687e-2,
  -1.327762e-2,
  -3.251833e-3,
  -2.850049e-2,
  1.216042e-4,
  -1.791523e-2,
  -1.655643e-2,
  -1.138292e-3,
  -2.399153e-2,
  -3.501818e-3,
  -1.157427e-2,
  -1.748419e-2,
  -1.86898e-4,
  -1.913161e-2,
  -6.030723e-3,
  -6.626808e-3,
  -1.678069e-2,
  2.545399e-5,
  -1.421694e-2,
  -7.603449e-3,
  -2.854298e-3,
  -1.491541e-2,
  -2.157863e-4,
  -9.525783e-3,
  -8.301913e-3,
  -1.271827e-4,
  -1.227118e-2,
  -6.879771e-4,
  -5.296779e-3,
  -8.215142e-3,
  1.673779e-3,
  -9.190752e-3,
  -1.211789e-3,
  -1.712278e-3,
  -7.460694e-3,
  2.683219e-3,
  -5.983473e-3,
  -1.649126e-3,
  1.111955e-3,
  -6.186975e-3,
  3.054252e-3,
  -2.917859e-3,
  -1.905348e-3,
  3.130009e-3,
  -4.56541e-3,
  2.951058e-3,
  -2.106866e-4,
  -1.930488e-3,
  4.362241e-3,
  -2.777214e-3,
  2.537068e-3,
  1.982167e-3,
  -1.717298e-3,
  4.885743e-3,
  -9.980288e-4,
  1.962486e-3,
  3.570448e-3,
  -1.295589e-3,
  4.820367e-3,
  6.169565e-4,
  1.353602e-3,
  4.528741e-3,
  -7.233228e-4,
  4.312184e-3,
  1.945372e-3,
  8.054359e-4,
  4.89015e-3,
  -7.552721e-5,
  3.516381e-3,
  2.906052e-3,
  3.784851e-4,
  4.735316e-3,
  5.67565e-4,
  2.581486e-3,
  3.462627e-3,
  9.959928e-5,
  4.178167e-3,
  1.131702e-3,
  1.636464e-3,
  3.622189e-3,
  -3.353404e-5,
  3.350152e-3,
  1.557819e-3,
  7.817441e-4,
  3.429513e-3,
  -4.52753e-5,
  2.384762e-3,
  1.808301e-3,
  8.46678e-5,
  2.95785e-3,
  2.649056e-5,
  1.403939e-3,
  1.869806e-3,
  -4.207584e-4,
  2.297637e-3,
  1.390146e-4,
  5.076565e-4,
  1.752611e-3,
  -7.303911e-4,
  1.544629e-3,
  2.523385e-4,
  -2.325984e-4,
  1.486941e-3,
  -8.637464e-4,
  7.888941e-4,
  3.350786e-4,
  -7.762084e-4,
  1.117068e-3,
  -8.562468e-4,
  1.058785e-4,
  3.67839e-4,
  -1.111986e-3,
  6.942162e-4,
  -7.511295e-4,
  -4.496392e-4,
  3.441574e-4,
  -1.253641e-3,
  2.69363e-4,
  -5.920923e-4,
  -8.463203e-4,
  2.692479e-4,
  -1.233171e-3,
  -1.130736e-4,
  -4.174896e-4,
  -1.075851e-3,
  1.570958e-4,
  -1.093316e-3,
  -4.198941e-4,
  -2.565498e-4,
  -1.149821e-3,
  2.662565e-5,
  -8.801728e-4,
  -6.316733e-4,
  -1.277316e-4,
  -1.094683e-3,
  -1.022957e-4,
  -6.368808e-4,
  -7.43114e-4,
  -3.900806e-5,
  -9.457193e-4,
  -2.123438e-4,
  -3.990034e-4,
  -7.614335e-4,
  1.037225e-5,
  -7.409751e-4,
  -2.912101e-4,
  -1.919057e-4,
  -7.032771e-4,
  2.723975e-5,
  -5.159737e-4,
  -3.32808e-4,
  -3.008892e-5,
  -5.90817e-4,
  2.159107e-5,
  -2.998137e-4,
  -3.372024e-4,
  8.182312e-5,
  -4.477384e-4,
  3.949796e-6,
  -1.129544e-4,
  -3.094817e-4,
  1.469428e-4,
  -2.957414e-4,
  -1.661238e-5,
  3.329581e-5,
  -2.579471e-4,
  1.734017e-4,
  -1.520273e-4,
  -3.360166e-5,
  1.358374e-4,
  -1.920693e-4,
  1.716167e-4,
  -2.80142e-5,
  -4.338013e-5,
  1.978181e-4,
  -1.20647e-4,
  1.519877e-4,
  7.071e-5,
  -4.476452e-5,
  2.261791e-4,
  -5.050677e-5,
  1.233144e-4,
  1.434054e-4,
  -3.8221e-5,
  2.292334e-4,
  1.406779e-5,
  9.202572e-5,
  1.925316e-4,
  -2.496524e-5,
  2.147019e-4,
  7.115943e-5,
  6.214719e-5,
  2.218728e-4,
  -6.242249e-6,
  1.884837e-4,
  1.204414e-4,
  3.579679e-5,
  2.348661e-4
];
getSum(List<int> data, int len) {
  int sum = 0;
  for (int i = 0; i < len; i++) {
    sum += data[i];
  }
  return sum;
}

averageFilter(List<int> dest, List<int> src, int start, int len, int n) {
  int i = 0;
  int resultLen = len;
  int temp = 0;
  if (start == 0) {
    for (i = 0; i < n; i++) {
      dest[i] = src[i];
    }
    i = n;
  } else {
    i = start - n;
  }
  for (; i < len - n; i++) {
    temp = getSum(src.sublist(i - n), n * 2);
    dest[i] = temp ~/ (n * 2);
  }

  for (i = len - n; i < len; i++) {
    dest[i] = src[i];
  }

  // len;
  return resultLen;
}

firBandPass218(List<int> dest, List<int> src, int start, int len) {
  for (int i = start; i < len; i++) {
    // if (i >= start) {
      double temp = 0;
      for (int j = 0; j < 429; j++) {
        if (i >= j) {
          temp += FIR[j] * src[i - j];
        }
      }
      dest[i] = temp.toInt();
    // } else {
    //   dest[i] = 0;
    // }
  }

  return len;
}

gaussianProcess(List<int> dest, int max, int len) {
  int i = 0;
  int j = 0;
  int k = 0;
  int pre = 0;

  for (i = max - 1; i > 0; i--) {
    if (dest[i] >= dest[i + 1]) {
      if (dest[i] * 1.1 < dest[i + 2]) {
        if (dest[i] < dest[i + 2] ~/ 2) {
          dest[i + 1] = (dest[i] * 0.2 + dest[i + 2] * 0.8 + 1) ~/ 1.0;
        } else {
          dest[i + 1] =
              (dest[i] * 0.2 + dest[i + 1] * 0.5 + dest[i + 2] * 0.8 + 1) ~/ 1.5;
        }
        continue;
      }
      while (dest[i] >= dest[i + 1] && dest[i] > 1) {
        j = 1;
        pre = dest[i];
        while (i - j > 0 && dest[i - j] >= dest[i + 1]) {
          j++;
        }
        if (i - j > 0 && dest[i - j] < dest[i - j - 1] ~/ 2) {
          dest[i - j] = (dest[i - j] * 0.2 +
                  dest[i - j - 1] * 0.2 +
                  dest[i - j + 1] * 0.8 +
                  1) ~/
              1.2;
        }
        for (k = 0; k < j; k++) {
          if (i - k >= 0) {
            dest[i - k] = (dest[i - k - 1] * 0.8 +
                    0.5 * dest[i - k] +
                    dest[i - k + 1] * 0.2 -
                    1) ~/
                1.5;
          }
        }
        if (pre == dest[i]) {
          break;
        }
      }
    }
  }

  for (i = max; i < len; i++) {
    if (dest[i + 1] >= dest[i] - 1) {
      if (dest[i + 1] * 1.1 + 2 < dest[i - 1] ||
          dest[i] < (dest[i - 1] * 7) ~/ 10) {
        if (dest[i] < dest[i - 1] ~/ 2) {
          dest[i] = (dest[i - 1] * 0.8 + 0.2 * dest[i + 1]+1) ~/ 1.0;
        } else {
          dest[i] =
              (dest[i - 1] * 0.8 + 0.2 * dest[i] + 0.2 * dest[i + 1] + 1) ~/ 1.2;
        }
        continue;
      }
      while (dest[i + 1] >= dest[i] - 1 && dest[i] > 1) {
        j = 1;
        pre = dest[i + 1];
        while (i + j + 1 < len - 1 &&
            dest[i + j + 1] * (1 + 0.05 * (j + 1)) >= dest[i] &&
            dest[i + j + 1] * 1.2 >= dest[i]) {
          j++;
        }
        for (k = 0; k < j; k++) {
          dest[i + k + 1] = (dest[i + k] * 0.2 +
                  dest[i + k + 1] * 0.5 +
                  dest[i + k + 2] * 0.8 -
                  3 -
                  j +
                  k) ~/
              1.5;
        }
        if (pre == dest[i + 1]) {
          break;
        }
      }
    }
  }
}

iirBandPass(List<int> dest, List<int> src, int start, int len) {
  int result = len;
  for (int i = start; i < len; i++) {
    double temp = 0;
    for (int k = 0; k < 5; k++) {
      if (i >= k) {
        temp += B[k] * src[i - k];
      }
    }
    for (int j = 1; j < 5; j++) {
      if ( i >= j) {
        temp -= A[j] * dest[i - j];
      }
    }
    dest[i] = temp.toInt();
  }

  return result;
}

isNotANumber(inputData) {
  if (inputData is int || inputData is double) {
    return true;
  }
  return false;
}
